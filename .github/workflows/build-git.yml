name: Build Git Binaries

on:
  push:
    paths:
      - '.github/workflows/build-git.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # - os: ubuntu-latest
          #   arch: x64
          - os: ubuntu-24.04-arm
            arch: arm64
          # - os: macos-14
          #   arch: x64
          # - os: macos-14-arm64
          #   arch: arm64

    name: Build Git on ${{ matrix.os }} (${{ matrix.arch }})

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Environment Variables
        run: |
          echo "GIT_VERSION=2.49.0" >> $GITHUB_ENV
          echo "GIT_TAR=git-2.49.0.tar.gz" >> $GITHUB_ENV
          echo "GIT_DIR=git-2.49.0" >> $GITHUB_ENV
        shell: bash

      - name: Install build dependencies (Linux)
        if: startsWith(matrix.os, 'ubuntu-')
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential curl libssl-dev libz-dev gettext file

      - name: Install build dependencies (macOS)
        if: startsWith(matrix.os, 'macos-')
        run: |
          brew install autoconf gettext curl openssl
          brew link --overwrite --force gettext || true

      - name: Download and extract Git source
        run: |
          set -euo pipefail
          curl -L -o $GIT_TAR https://mirrors.edge.kernel.org/pub/software/scm/git/${GIT_TAR}
          tar -xzf $GIT_TAR
        shell: bash

      - name: Build Git
        run: |
          cd $GIT_DIR

          if [ -e install ] && [ ! -d install ]; then
            rm -f install
          fi

          make configure
          ./configure --prefix=$PWD/install || { cat config.log; exit 1; }
          make -j$(getconf _NPROCESSORS_ONLN)
          make install
          find install -type f -exec file {} \; | grep ELF | cut -d: -f1 | xargs --no-run-if-empty strip --strip-unneeded || true
        shell: bash

      - name: Archive Git output
        run: |
          cd $GIT_DIR/install
          zip -r ../../git-${{ env.GIT_VERSION }}-${{ matrix.os }}-${{ matrix.arch }}.zip .
        shell: bash

      - name: Set up SSH key for SCP
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
        env:
          SSH_PRIVATE_KEY: ${{ secrets.VALINOR_WORKER_SSH_KEY }}
        shell: bash

      - name: Upload to server via SCP
        if: success()
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
      
          echo "Host ${VALINOR_SERVER_ADDRESS}
            HostName ${VALINOR_SERVER_ADDRESS}
            User ${VALINOR_USER}
            IdentityFile ~/.ssh/id_rsa
            IdentitiesOnly yes
            PubkeyAcceptedAlgorithms +ssh-rsa
            HostkeyAlgorithms +ssh-rsa
            StrictHostKeyChecking no" >> ~/.ssh/config
      
          scp git-${GIT_VERSION}-${{ matrix.os }}-${{ matrix.arch }}.zip ${VALINOR_USER}@${VALINOR_SERVER_ADDRESS}:/var/www/resources.agena.ai/tools/git/
        env:
          SSH_PRIVATE_KEY: ${{ secrets.VALINOR_WORKER_SSH_KEY }}
          VALINOR_USER: ${{ secrets.VALINOR_WORKER_SSH_USERNAME }}
          VALINOR_SERVER_ADDRESS: ${{ secrets.VALINOR_SERVER_ADDRESS }}
        shell: bash

      - name: Cleanup SSH key
        run: rm -f ~/.ssh/id_rsa
